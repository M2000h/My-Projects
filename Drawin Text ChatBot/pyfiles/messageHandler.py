import vkapi

Ar
def zero(p):
    y1 = 0
    while y1 < 12:
            x1 = 0
            while x1 < p:
                Ar[y1][x1] = 0
                x1+=1
            y1+=1

def paint(a,l):
    if a == " " or a == "_":
        return 2
    elif a=="\n":
        printA(l,3,0,0,1)
        return 2
    elif a == "卐":
        printA(l,2, 5, 1, 5)
        printA(l,2, 1, 5, 9)
        printA(l,2, 1, 9, 5)
        printA(l,1, 1, 1, 5)
        printA(l,1, 9, 5, 5)
        printA(l,1, 5, 1, 9)
        return 12
    elif a=="🙂" or  a=="☺" or  a=="🤣" or  a=="😂" or  a=="😅" or  a=="😆" or  a=="😁" or  a=="😃" or a=="😀" or a=="😇" or a=="😊" or  a=="😅" or  a=="😄":    #xx  y    x->y   y->10-x
        printA(l, 2, 1, 7, 3)
        printA(l, 2, 11, 7, 3)
        printA(l, 2, 3, 9, 9)
        printA(l, 1, 1, 5, 3)
        printA(l, 1, 3, 7, 3)
        printA(l, 1, 13, 5, 3)
        printA(l, 1, 11, 7, 3)
        printA(l, 1, 5, 1, 3)
        printA(l, 1, 9, 1, 3)
        return 16

    elif a == "☹" or a=="😭" or a=="😢" or a=="😞" or a=="😔" or a=="😟" or a=="😕" or a=="🙁" or a=="☹️" or a=="😣" or a=="😖" or a=="😫" or a=="😩":
        #printA(l, 2, 1, 9, 3)
        #printA(l, 2, 11, 9, 3)
        printA(l, 2, 1, 7, 13)
        #printA(l, 1, 1, 7, 3)
        printA(l, 1, 1, 7, 3)
        #printA(l, 1, 13, 7, 3)
        printA(l, 1, 13, 7, 3)#
        printA(l, 1, 5, 1, 3)
        printA(l, 1, 9, 1, 3)
        return 16
    elif a == "🙃":
        #printA(l, 2, 1, 9, 3)
        #printA(l, 2, 11, 9, 3)
        printA(l, 2, 1, 1, 13)
        #printA(l, 1, 1, 7, 3)
        printA(l, 1, 1, 1, 3)
        #printA(l, 1, 13, 7, 3)
        printA(l, 1, 13, 1, 3)#
        printA(l, 1, 5, 7, 3)
        printA(l, 1, 9, 7, 3)
        return 16
    elif a=="♡" or a=="💓" or a=="💔" or a=="💕" or a=="💖" or a=="💗" or a=="💘" or a=="💙" or a=="💚" or a=="💛" or a=="💜" or a=="💝" or a=="💞" or a=="💟" or a=="🖤" or a=="❤":
        printA(l,2, 1, 1, 7)
        printA(l,2, 11, 1 , 7)
        printA(l,1, 7, 1, 3)
        printA(l,1, 11, 1, 3)
        printA(l,2, 7, 3, 5)
        printA(l,2, 7, 9, 5)
        printA(l,2, 3, 7, 5)
        printA(l,2, 11, 7, 5)
        printA(l,1, 3, 5, 3)
        printA(l,1, 15, 5, 3)
        printA(l,1, 7, 7, 3)
        printA(l,1, 11, 7, 3)
        printA(l,2, 1, 5, 3)
        printA(l,2, 15, 5, 3)
        printA(l,1, 1, 1, 5)
        printA(l,1, 17, 1, 5)
        return 20

    elif a == "👀":
        printA(l,2, 1, 1, 7)
        printA(l,2, 1, 5, 3)
        printA(l,2, 1, 9, 7)
        printA(l,1, 1, 1, 9)
        printA(l,1, 7, 1, 9)
        printA(l,2, 11, 1, 7)
        printA(l,2, 11, 5, 3)
        printA(l,2, 11, 9, 7)
        printA(l,1, 11, 1, 9)
        printA(l,1, 17, 1, 9)
        return 20

    elif a=="✝️" or a=="☦️" or a=="☦" or a=="†":
        printA(l,1, 3, 1, 9)
        printA(l,2, 1, 3, 5)
        return 8

    elif a == "0" or a == "o" or a == "о":
        printA(l,2, 1, 1, 5)
        printA(l,2, 1, 9, 5)
        printA(l,1, 1, 1, 9)
        printA(l,1, 5, 1, 9)
        return 8
    elif a == "1":
        printA(l,1, 3, 1, 9)
        printA(l,2, 1, 3, 2)
        return 6

    elif a == "2":
        printA(l,2,  1, 1, 3)
        printA(l,2,  1, 5, 3)
        printA(l,2,  1, 9, 3)
        printA(l,1,  3, 1, 5)
        printA(l,1,  1, 5, 5)
        return 6

    elif a == "3" or a == "э" or a == "з":
    	printA(l, 2,  1, 1, 3)
    	printA(l,2,  1, 5, 3)
    	printA(l,2,  1, 9, 3)
    	printA(l,1,  3, 1, 9)
    	return 6

    elif a == "4" or a == "ч":
    	printA(l,2, 1, 5, 5)
    	printA(l,1, 5, 1, 9)
    	printA(l,1, 1, 1, 5)
    	return 8

    elif a == "5" or a == "s":
    	printA(l,2,  1, 1, 3)
    	printA(l,2,  1, 5, 3)
    	printA(l,2,  1, 9, 3)
    	printA(l,1,  1, 1, 5)
    	printA(l,1,  3, 5, 5)
    	return 6

    elif a == "6"or a == "б":
    	printA(l,2,  1, 1, 5)
    	printA(l,2,  1, 5, 5)
    	printA(l,2,  1, 9, 5)
    	printA(l,1,  1, 1, 9)
    	printA(l,1,  5, 5, 5)
    	return 8

    elif a == "7":
        printA(l,2,  1, 1, 3)
        printA(l,1,  3, 1, 9)
        printA(l,2,  1, 7, 3)
        return 6

    elif a == "8"or a == "в" or a == "ө":
        printA(l,2, 1, 1, 5)
        printA(l,2, 1, 5, 5)
        printA(l,2, 1, 9, 5)
        printA(l,1, 1, 1, 9)
        printA(l,1, 5, 1, 9)
        return 8

    elif a == "9":
        printA(l,2, 1, 1, 5)
        printA(l,2, 1, 5, 5)
        printA(l,2, 1, 9, 5)
        printA(l,1, 1, 1, 5)
        printA(l,1, 5, 1, 9)
        return 8

    elif a == "!":
        printA(l,1, 1, 1, 5)
        Ar[9][l+1]+=1
        return 4



    elif a == "a" or a == "а":
        printA(l,2, 1, 1, 5)
        printA(l,2, 1, 7, 5)
        printA(l,1, 1, 1, 9)
        printA(l,1, 5, 1, 9)
        return 8

    elif a == "b" or a=="ь":
        printA(l,2,  1, 5, 5)
        printA(l,2,  1, 9, 5)
        printA(l,1,  1, 1, 9)
        printA(l,1,  5, 5, 5)
        return 8

    elif a == "c" or  a == "с":
        printA(l,2,  1, 1, 3)
        printA(l,2,  1, 9, 3)
        printA(l,1,  1, 1, 9)
        return 6

    elif a == "d":
        printA(l,2, 1, 5, 5)
        printA(l,2, 1, 9, 5)
        printA(l,1, 1, 5, 5)
        printA(l,1, 5, 1, 9)
        return 8

    elif a == "e" or a == "е" or a == "ё":
        printA(l,2, 1, 1, 3)
        printA(l,2, 1, 5, 3)
        printA(l,2, 1, 9, 3)
        printA(l,1, 1, 1, 9)
        return 6

    elif a == "f":
        printA(l,2,  1, 1, 5)
        printA(l,2,  1, 5, 3)
        printA(l,1,  1, 1, 9)
        return 8

    elif a == "g":
        printA(l,2,  1, 1, 5)
        printA(l,2,  1, 9, 5)
        printA(l,1,  1, 1, 9)
        printA(l,1,  5, 7, 2)
        return 8

    elif a == "h" or a == "н" or a == "Һ":
        printA(l,2, 1, 5, 5)
        printA(l,1, 1, 1, 9)
        printA(l,1, 5, 1, 9)
        return 8

    elif a == "i":
        printA(l,1, 1, 5, 5)
        printA(l,1, 1, 1, 1)
        return 4

    elif a == "ï":
        printA(l,1, 3, 5, 5)
        printA(l,1, 1, 1, 1)
        printA(l,1, 5, 1, 1)
        return 8

    elif a == "j":
        printA(l,1, 3, 5, 5)
        printA(l,2, 1, 9, 3)
        printA(l,1, 3, 1, 1)
        return 6

    elif a == "k" or a == "к":
        printA(l,2, 1, 5, 5)
        printA(l,1, 5, 3, 5)
        printA(l,1, 1, 1, 9)
        printA(l,1, 7, 1, 3)
        printA(l,1, 7, 7, 3)
        printA(l,1, 6, 3, 1)
        printA(l,1, 6, 7, 1)
        return 10

    elif a == "l":
        printA(l,2,  1, 9, 3)
        printA(l,1,  1, 1, 9)
        return 6

    elif a == "q":
        printA(l,2, 1, 1, 5)
        printA(l,2, 1, 5, 5)
        printA(l,1, 1, 1, 5)
        printA(l,1, 5, 1, 9)
        return 8

    elif a == "m" or a=="м":
        printA(l,2, 1, 1, 9)
        printA(l,1, 1, 1, 9)
        printA(l,1, 5, 1, 9)
        printA(l,1, 9, 1, 9)
        return 12

    elif a=="n":
        printA(l, 2, 1, 5, 5)
        printA(l, 2, 5, 7, 5)
        printA(l, 1, 5, 5, 3)
        printA(l, 1, 1, 1, 9)
        printA(l, 1, 9, 1, 9)
        return 12

    elif a == "p" or a == "р":
        printA(l,2,  1, 1, 5)
        printA(l,2,  1, 5, 5)
        printA(l,1,  1, 1, 9)
        printA(l,1,  5, 1, 5)
        return 8

    elif a == "r":
        printA(l,2,  1, 1, 5)
        printA(l,2,  1, 5, 5)
        printA(l,1,  1, 1, 9)
        printA(l,1,  5, 1, 9)
        printA(l,2,  5, 9, 3)
        return 10

    elif a == "t" or a == "т":
        printA(l,2, 1, 1, 5)
        printA(l,1, 3, 1, 9)
        return 8

    elif a == "w" or a=="ш":
        printA(l,2, 1, 9, 9)
        printA(l,1, 1, 1, 9)
        printA(l,1, 5, 3, 7)
        printA(l,1, 9, 1, 9)
        return 12

    elif a == "u" or a == "v":
        printA(l,2, 1, 9, 5)
        printA(l,1, 1, 1, 9)
        printA(l,1, 5, 1, 9)
        return 8

    elif a == "x" or a=="х":
        printA(l,2, 3, 5, 5)
        printA(l,1, 3, 3, 5)
        printA(l,1, 7, 3, 5)
        printA(l,1, 1, 1, 3)
        printA(l,1, 9, 1, 3)
        printA(l,1, 1, 7, 3)
        printA(l,1, 9, 7, 3)
        printA(l,1, 2, 3, 1)
        printA(l,1, 8, 3, 1)
        printA(l,1, 2, 7, 1)
        printA(l,1, 8, 7, 1)
        return 12

    elif a == "y":
    	printA(l,2, 1, 5, 5)
    	printA(l,1, 3, 5, 5)
    	printA(l,1, 5, 1, 5)
    	printA(l,1, 1, 1, 5)
    	return 8

    elif a == "у":
    	printA(l,2, 1, 5, 5)
    	printA(l,2, 1, 9, 5)
    	printA(l,1, 5, 1, 9)
    	printA(l,1, 1, 1, 5)
    	return 8

    elif a=="z":
        printA(l,2, 1, 1, 5)
        printA(l,2, 3, 5, 5)
        printA(l,2, 5, 9, 5)
        printA(l,1, 5, 1, 9)
        return 12
    elif a =="г" or a == "ғ":
        printA(l, 2, 1, 1, 3)
        printA(l, 1, 1, 1, 9)
        return 6
    elif a== "д":
        printA(l, 2, 3, 1, 5)
        printA(l, 2, 1, 9, 9)
        printA(l, 1, 3, 1, 9)
        printA(l, 1, 7, 1, 9)
        return 12
    elif a== "ж":
        printA(l, 2, 3, 5, 9)
        printA(l, 1, 7, 1, 9)
        printA(l, 1, 3, 3, 5)
        printA(l, 1, 11, 3, 5)
        printA(l, 1, 1, 1, 3)
        printA(l, 1, 13, 1, 3)
        printA(l, 1, 1, 7, 3)
        printA(l, 1, 13, 7, 3)
        printA(l, 1, 2, 3, 1)
        printA(l, 1, 12, 3, 1)
        printA(l, 1, 2, 7, 1)
        printA(l, 1, 12, 7, 1)
        return 16

    elif a=="и" or a=="й":
        printA(l, 2, 5, 5, 5)
        printA(l, 2, 1, 7, 5)
        printA(l, 1, 5, 5, 3)
        printA(l, 1, 1, 1, 9)
        printA(l, 1, 9, 1, 9)
        if a=="й":
            printA(l, 1, 5, 1, 1)
        return 12
    elif a=="л":
        printA(l, 2, 3, 1, 5)
        printA(l, 1, 3, 1, 9)
        printA(l, 1, 7, 1, 9)
        printA(l, 2, 1, 9, 3)
        return 10

    elif a== 'п':
        printA(l, 2,1, 1, 5)
        printA(l, 1,1, 1, 9)
        printA(l, 1,5, 1, 9)
        return 8
    elif a == "ф":
        printA(l,2, 1, 1, 9)
        printA(l,2, 1, 5, 9)
        printA(l,1, 1, 1, 5)
        printA(l,1, 5, 1, 9)
        printA(l,1, 9, 1, 5)
        return 12
    elif a == "ц":
        printA(l,2, 1, 9, 7)
        printA(l,1, 1, 1, 9)
        printA(l,1, 5, 1, 9)
        return 10
    elif a == "щ":
        printA(l,2, 1, 9, 11)
        printA(l,1, 1, 1, 9)
        printA(l,1, 5, 3, 7)
        printA(l,1, 9, 1, 9)
        return 14
    elif a == "ы":
        printA(l,2,  1, 5, 5)
        printA(l,2,  1, 9, 5)
        printA(l,1,  1, 1, 9)
        printA(l,1,  5, 5, 5)
        printA(l,1,  9, 1, 9)
        return 12
    elif a=="ъ":
        printA(l,2,  1, 1, 3)
        printA(l,2,  3, 5, 5)
        printA(l,2,  3, 9, 5)
        printA(l,1,  3, 1, 9)
        printA(l,1,  7, 5, 5)
        return 10
    elif a == "ю":
        printA(l,2, 5, 1, 5)
        printA(l,2, 5, 9, 5)
        printA(l,2, 1, 5, 5)
        printA(l,1, 5, 1, 9)
        printA(l,1, 9, 1, 9)
        printA(l,1, 1, 1, 9)

        return 12
    elif a=="я":
        printA(l, 2, 3, 1, 5)
        printA(l, 2,  3, 5, 5)
        printA(l, 1,  3, 1, 9)
        printA(l, 1,  7, 1, 9)
        printA(l,2, 1, 9, 3)
        return 10
    elif a == "$":
    	printA(l,2,  1, 1, 9)
    	printA(l,2,  1, 5, 9)
    	printA(l,2,  1, 9, 9)
    	printA(l,1,  1, 1, 5)
    	printA(l,1,  5, 1, 9)
    	printA(l,1,  9, 5, 5)
    	return 12
    elif a == "." or a == ",":
        printA(l,1, 1, 9, 1)
        return 4
    elif a == "'" or a == '*':
        printA(l,1, 1, 1, 1)
        return 4
    elif a=='"':
        printA(l,1, 1, 1, 1)
        printA(l,1, 5, 1, 1)
        return 8
    elif a == ":" or a == ";":
        printA(l,1, 1, 3, 1)
        printA(l,1, 1, 7, 1)
        return 4
    elif a == "?":
        printA(l,2, 1, 1, 3)
        printA(l,2, 1, 5, 3)
        printA(l,1, 3, 1, 5)
        Ar[9][l+1]+=1
        return 6
    elif a=="№":
        printA(l, 2, 1, 5, 5)
        printA(l, 2, 5, 7, 5)
        printA(l, 1, 1, 3, 7)
        printA(l, 1, 5, 5, 3)
        printA(l, 1, 9, 1, 9)
        printA(l, 1, 13, 1, 1)
        return 16
    elif a=="-":
        printA(l, 2, 1, 5, 5)
        return 8
    elif a=="=":
        printA(l, 2, 1, 3, 5)
        printA(l, 2, 1, 7, 5)
        return 8
    elif a=="+":
        printA(l, 2, 1, 5, 5)
        printA(l, 1, 3, 3, 5)
        return 8
    elif a == "%" or a == "÷":
        printA(l,1, 3, 1, 1)
        printA(l,1, 3, 9, 1)
        printA(l, 2, 1, 5, 5)
        return 8
    elif a=="±":
        printA(l, 2, 1, 3, 5)
        printA(l, 1, 3, 1, 5)
        printA(l, 2, 1, 9, 5)
        return 8
    elif a == "#":
        printA(l,2, 1, 3, 9)
        printA(l,2, 1, 7, 9)
        printA(l,1, 3, 1, 9)
        printA(l,1, 7, 1, 9)
        return 12
    elif a=="(":
        printA(l, 1, 3, 1, 3)
        printA(l, 1, 3, 7, 3)
        printA(l, 1, 1, 3, 5)
        printA(l, 2, 3, 1, 3)
        printA(l, 2, 1, 3, 3)
        printA(l, 2, 3, 9, 3)
        printA(l, 2, 1, 7, 3)
        return 8
    elif a==")":
        printA(l, 1, 3, 1, 3)
        printA(l, 1, 3, 7, 3)
        printA(l, 1, 5, 3, 5)
        printA(l, 2, 1, 1, 3)
        printA(l, 2, 3, 3, 3)
        printA(l, 2, 1, 9, 3)
        printA(l, 2, 3, 7, 3)
        return 8
    elif a=="[":
        printA(l, 1, 1, 1, 9)
        printA(l, 2, 1, 1, 3)
        printA(l, 2, 1, 9, 3)
        return 6
    elif a=="]":
        printA(l, 1, 3, 1, 9)
        printA(l, 2, 1, 1, 3)
        printA(l, 2, 1, 9, 3)
        return 6
    elif a=="{":
        printA(l, 1, 3, 1, 9)
        printA(l, 2, 3, 1, 3)
        printA(l, 2, 3, 9, 3)
        printA(l, 2, 1, 5, 3)
        return 8
    elif a=="}":
        printA(l, 1, 3, 1, 9)
        printA(l, 2, 1, 1, 3)
        printA(l, 2, 1, 9, 3)
        printA(l, 2, 3, 5, 3)
        return 8
    elif a == "•":
        printA(l,1, 1, 5, 1)
        return 4
    return 0

def printA(h,n, x, y,l):
    x+=h
    if n == 1:
        l = l + y
        while y < l:
            Ar[y][x] = 1
            y = y + 1
    elif n == 2:
        l = l + x
        while x < l:
            Ar[y][x] = 1
            x = x + 1
    elif n == 3:
        Ar[0][x]=47

def goprint(l):
    y = 0
    l-=2
    arg=0
    arg_cc=0
    lmax=l
    lmin=0
    txt = '[club146168940|'
    while y < 12:
        x = lmin
        while x < lmax:
            if Ar[y][x]==47:
                lmax=x
                arg=1
                break
            if (Ar[y + 1][x] * Ar[y][x - 1] * Ar[y + 1][x - 1]) or (Ar[y - 1][x] + Ar[y][x + 1] == 0 and Ar[y - 1][x + 1]):
                txt+='╚'#нижний левый ╚
            elif (Ar[y + 1][x] * Ar[y][x + 1] * Ar[y + 1][x + 1]) or (Ar[y - 1][x] + Ar[y][x - 1] == 0 and Ar[y - 1][x - 1]):
                txt+='╝'#нижний правый ╝
            elif (Ar[y - 1][x] * Ar[y][x - 1] * Ar[y - 1][x - 1]) or (Ar[y + 1][x] + Ar[y][x + 1] == 0 and Ar[y + 1][x + 1]):
                 txt+='╔' #верхний левый ╔
            elif (Ar[y - 1][x] * Ar[y][x + 1] * Ar[y - 1][x + 1]) or (Ar[y + 1][x] + Ar[y][x - 1] == 0 and Ar[y + 1][x - 1]):
                 txt+='╗'# верхний правый ╗
            elif Ar[y][x + 1] + Ar[y][x - 1]:
                 txt+='║' # ║
            elif Ar[y + 1][x] + Ar[y - 1][x]:
                 txt+='═' # горизонт ═
            else:
                 txt+='─'
            if y==0 and lmin==0 and x==8:
                txt+=']'
                arg_cc=1
            x+=2
        if y==0 and lmin==0 and arg_cc==0:
                txt+=']'
        y = y + 2
        if y==12 and arg:
            y=0
            lmin=lmax+2
            lmax=l
            arg=0
            txt+='\n'
        txt+='\n'
    zero(l)
    return txt

def goprintsmall(l):
    y = 1
    arg=0
    lmax=l
    lmin=1
    txt = ''
    while y < 12:
        x = lmin
        while x < lmax:
            if Ar[y][x]==47:
                lmax=x
                arg=1
                break
            if Ar[y - 1][x] * Ar[y][x + 1] and Ar[y + 1][x] + Ar[y][x - 1] == 0:
                txt+='╚'#нижний левый ╚
            elif Ar[y - 1][x] * Ar[y][x - 1] and Ar[y + 1][x] + Ar[y][x + 1] == 0:
                txt+='╝'#нижний правый ╝
            elif Ar[y + 1][x] * Ar[y][x + 1] and Ar[y - 1][x] + Ar[y][x - 1] == 0:
                 txt+='╔' #верхний левый ╔
            elif Ar[y + 1][x] * Ar[y][x - 1] and Ar[y - 1][x] + Ar[y][x + 1] == 0:
                 txt+='╗'# верхний правый ╗
            elif Ar[y + 1][x] * Ar[y-1][x] and Ar[y][x+1] + Ar[y][x - 1] == 0:
                 txt+='║' # ║
            elif Ar[y][x+1] * Ar[y][x - 1] and Ar[y + 1][x] + Ar[y-1][x] == 0:
                 txt+='═' # горизонт ═
            elif Ar[y][x+1] and Ar[y][x-1] + Ar[y-1][x] + Ar[y+1][x]== 0:
                 txt+='╞' #╞
            elif Ar[y][x-1] and Ar[y][x+1] + Ar[y-1][x] + Ar[y+1][x]== 0:
                 txt+='╡' #╡
            elif Ar[y+1][x] and Ar[y][x-1] + Ar[y-1][x] + Ar[y][x+1]== 0:
                 txt+='╥' #╥
            elif Ar[y-1][x] and Ar[y][x-1] + Ar[y+1][x] + Ar[y][x+1]== 0:
                 txt+='╨' #╨
            elif Ar[y][x+1]==0 and Ar[y][x-1]*Ar[y-1][x] * Ar[y+1][x]:
                 txt+='╣' #╣
            elif Ar[y][x-1]==0 and Ar[y][x+1]*Ar[y-1][x] * Ar[y+1][x]:
                 txt+='╠' #╠
            #
            #
            #

            #
            #
            #
            #elif y<10:
            #    if Ar[y + 1][x] * Ar[y+2][x + 1] and Ar[y + 3][x] + Ar[y+2][x - 1] == 0:
            #        txt+='╚'#нижний левый ╚
            #    elif Ar[y + 1][x] * Ar[y+2][x - 1] and Ar[y + 3][x] + Ar[y+2][x + 1] == 0:
            #        txt+='╝'#нижний правый ╝
            #    elif Ar[y + 3][x] * Ar[y+2][x + 1] and Ar[y + 1][x] + Ar[y+2][x - 1] == 0:
            #         txt+='╔' #верхний левый ╔
            #    elif Ar[y + 3][x] * Ar[y+2][x - 1] and Ar[y + 1][x] + Ar[y+2][x + 1] == 0:
            #         txt+='╗'# верхний правый ╗
            #    elif Ar[y + 3][x] * Ar[y+1][x] and Ar[y+2][x+1] + Ar[y+2][x - 1] == 0:
            #         txt+='║' # ║
            #    elif Ar[y+2][x+1] * Ar[y+2][x - 1] and Ar[y + 3][x] + Ar[y+1][x] == 0:
            #         txt+='═' # горизонт ═
            #    elif Ar[y+2][x+1] and Ar[y+2][x-1] + Ar[y+1][x] + Ar[y+3][x]== 0:
            #         txt+='╞' #╞
            #    elif Ar[y+2][x-1] and Ar[y+2][x+1] + Ar[y+1][x] + Ar[y+3][x]== 0:
            #         txt+='╡' #╡
            #    elif Ar[y+3][x] and Ar[y+2][x-1] + Ar[y+1][x] + Ar[y+2][x+1]== 0:
            #         txt+='╥' #╥
            #    elif Ar[y+1][x] and Ar[y+2][x-1] + Ar[y+3][x] + Ar[y+2][x+1]== 0:
            #         txt+='╨' #╨
            #    elif Ar[y+2][x+1]==0 and Ar[y+2][x-1]*Ar[y+1][x] * Ar[y+3][x]:
            #         txt+='╣' #╣
            #    elif Ar[y+2][x-1]==0 and Ar[y+2][x+1]*Ar[y+1][x] * Ar[y+3][x]:
            #         txt+='╠' #╠
            #    else:
            #        txt+='─'

            x-=2
            if Ar[y - 1][x] * Ar[y][x + 1] and Ar[y + 1][x] + Ar[y][x - 1] == 0:
                txt+='╚'#нижний левый ╚
            elif Ar[y - 1][x] * Ar[y][x - 1] and Ar[y + 1][x] + Ar[y][x + 1] == 0:
                txt+='╝'#нижний правый ╝
            elif Ar[y + 1][x] * Ar[y][x + 1] and Ar[y - 1][x] + Ar[y][x - 1] == 0:
                 txt+='╔' #верхний левый ╔
            elif Ar[y + 1][x] * Ar[y][x - 1] and Ar[y - 1][x] + Ar[y][x + 1] == 0:
                 txt+='╗'# верхний правый ╗
            elif Ar[y + 1][x] * Ar[y-1][x] and Ar[y][x+1] + Ar[y][x - 1] == 0:
                 txt+='║' # ║
            elif Ar[y][x+1] * Ar[y][x - 1] and Ar[y + 1][x] + Ar[y-1][x] == 0:
                 txt+='═' # горизонт ═
            elif Ar[y][x+1] and Ar[y][x-1] + Ar[y-1][x] + Ar[y+1][x]== 0:
                 txt+='╞' #╞
            elif Ar[y][x-1] and Ar[y][x+1] + Ar[y-1][x] + Ar[y+1][x]== 0:
                 txt+='╡' #╡
            elif Ar[y+1][x] and Ar[y][x-1] + Ar[y-1][x] + Ar[y][x+1]== 0:
                 txt+='╥' #╥
            elif Ar[y-1][x] and Ar[y][x-1] + Ar[y+1][x] + Ar[y][x+1]== 0:
                 txt+='╨' #╨
            elif Ar[y][x+1]==0 and Ar[y][x-1]*Ar[y-1][x] * Ar[y+1][x]:
                 txt+='╣' #╣
            elif Ar[y][x-1]==0 and Ar[y][x+1]*Ar[y-1][x] * Ar[y+1][x]:
                 txt+='╠' #╠
            else:
                txt+='─'
            x+=4
        y+= 4
        if y==12 and arg:
            y=0
            lmin=lmax+2
            lmax=l
            arg=0
            txt+='\n'
        txt+='\n'
    zero(l)
    return txt

def get_answer(body):
    zero(100)
    strlen=0
    lastspace=0
    lastd=-1
    d=0
    s=0
    argn=0
    ln=len(body)
    if ln>90:
        return "Cлишком большое сообщение(\nПопробуй его разделить на несколько"
    while d<ln:
        w=body[d]
        if w==" ":
            if s-lastspace>84:
                zero(s)
                return "Разделяй большие слова пробелами('"+ body[lastd+1:d]+"'),чтобы их было проще обрабатывать"
            if strlen>84:
                paint("\n",lastspace)

                strlen=s-lastspace
                lastspace = s
                s+=paint(" ",s)
            else:
                lastspace=s
                g=paint(w,s)
                s+=g
                strlen+=g
            lastd=d
        else:
            g=paint(w,s)
            s+=g
            strlen+=g
            argn+=g
        if w=="\n":
            strlen=0
            lastspace=s
            argn-=2
        d+=1
    if body[0]=='4' and body[1]=='2':
        return goprintsmall(s-2)
    ll=goprint(s)
    if argn:
        return ll
    return ""

def create_answer(data, token):
    user_id = data['user_id']
    message = get_answer(data['body'].lower()+" ")
    if len(message)<8:
        message="Пока я могу обрабатывать только слова и некоторые смайлы("
    vkapi.send_message(user_id, token,message)


def join(data, token):
    vkapi.send_message(data['user_id'], token,"Спасибо,что подписался!😊")
    vkapi.send_message(data['user_id'], token,get_answer("hello "))
    vkapi.send_message(data['user_id'], token,"Если ты пишешь с 💻компа💻, бот всё выведет идеально😉"
    +"\n~~~~\n"+
    "С 📱iphone📱,  делай строки более короткими, используя больше переносов, чтобы не получился лабиринт😎"
    +"\n~~~~\n"+
    "С 🍐android🍐, чтобы прочесть длинные строки (лабиринт), поверни телефон горизонтально😏")
